{
    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "printf Colors": {
        "prefix": "colors",
        "body": [
            "# Colors",
            "readonly cyan='\\033[0;36m'        # Title;",
            "readonly red='\\033[0;31m'         # Error;",
            "readonly yellow='\\033[1;33m'      # Warning;",
            "readonly purple='\\033[0;35m'      # Alert;",
            "readonly blue='\\033[0;34m'        # Attention;",
            "readonly light_gray='\\033[0;37m'  # Option;",
            "readonly green='\\033[0;32m'       # Done;",
            "readonly reset='\\033[0m'          # No color, end of sentence;",
            "",
            "# %b - Print the argument while expanding backslash escape sequences.",
            "# %q - Print the argument shell-quoted, reusable as input.",
            "# %d, %i - Print the argument as a signed decimal integer.",
            "# %s - Print the argument as a string.",
            "",
            "#Syntax:",
            "#    printf \"'%b' 'TEXT' '%s' '%b'\\n\" \"\\${color}\" \"\\${var}\" \"\\${reset}\"",
            "$0"
        ],
        "description": "Set color variables to use with printf"
    },
    "printf": {
        "prefix": "printf",
        "body": [
            "printf \"%b${1:TEXT}%s%b\\n\" \"\\${${2:color}}\"${3: \"\\${${4:var}\\}\"} \"\\${reset}\"${5: ; sleep ${6:seconds} ;}",
            "$0"
        ],
        "description": "printf syntax"
    },
    "Function": {
        "prefix": "function",
        "body": [
            "function ${1:NAME}() {",
            "\t${0::}",
            "}",
        ],
        "description": "Function syntax"
    },
    "Variable": {
        "prefix": "var",
        "body": [
            "\"\\${${0:var}}\"",
        ],
        "description": "Insert new variable syntax"
    },
    "Create file and folder": {
        "prefix": "mkfile",
        "body": [
            "function mkfile() {",
            "    if [ \"\\$1\" == \"\" ]; then",
            "        printf \"%bIncorrect use of 'mkfile' Function !%b\\nSyntax:\\vmkfile 'foo/bar.txt';%b\" \"\\${purple}\" \"\\${light_gray}\" \"\\${reset}\" 1>&2 ;",
            "        exit 2 ;",
            "    fi",
            "",
            "    mkdir -p \"\\$(dirname \"\\$1\")\" && touch \"\\$1\" || exit 2 ;",
            "}",
            "$0"
        ],
        "description": "printf syntax"
    },
    "Timer": {
        "prefix": "timer",
        "body": [
            "function timer_() {",
            "    if [ \"\\${#}\" == \"\" ]; then",
            "        printf \"%bIncorrect use of 'timer_' Function !%b\\nSyntax:\\vtimer_ 'PHRASE';%b\\n\" \"\\${purple}\" \"\\${light_gray}\" \"\\${reset}\" 1>&2 ;",
            "        exit 2 ;",
            "    fi",
            "",
            "    for run in {10..0}; do",
            "        clear; printf \"%b%s%b\\nContinuing in: %ss%b\\n\" \"\\${blue}\" \"\\${*}\" \"\\${light_gray}\" \"\\${run}\" \"\\${reset}\" ; sleep 1 ;",
            "    done",
            "    return",
            "}",
            "$0"
        ],
        "description": "printf syntax"
    }
}
